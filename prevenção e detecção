#include <iostream>
#include <thread>
#include <mutex>
#include <chrono>

// Recursos
std::mutex mutexA;
std::mutex mutexB;

// Função da Thread 1
void thread1() {
    std::cout << "Thread 1: Tentando adquirir mutexA e mutexB...\n";
    
    // Usando std::try_lock para evitar deadlock
    while (std::try_lock(mutexA, mutexB) == -1) {
        std::cout << "Thread 1: Falha ao adquirir os dois mutexes, tentando novamente...\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
    
    std::cout << "Thread 1: Ambos mutexes adquiridos!\n";
    
    std::this_thread::sleep_for(std::chrono::milliseconds(100)); // Simula trabalho
    
    // Mutexes serão liberados automaticamente
}

// Função da Thread 2
void thread2() {
    std::cout << "Thread 2: Tentando adquirir mutexA e mutexB...\n";

    // Usando std::try_lock para evitar deadlock
    while (std::try_lock(mutexA, mutexB) == -1) {
        std::cout << "Thread 2: Falha ao adquirir os dois mutexes, tentando novamente...\n";
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
    
    std::cout << "Thread 2: Ambos mutexes adquiridos!\n";
    
    std::this_thread::sleep_for(std::chrono::milliseconds(100)); // Simula trabalho
    
    // Mutexes serão liberados automaticamente
}

int main() {
    std::thread t1(thread1);
    std::thread t2(thread2);

    t1.join();
    t2.join();

    return 0;
}
